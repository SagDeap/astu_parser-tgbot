import requests
from bs4 import BeautifulSoup
import re
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Union, Optional
import logging
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –¢—É—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏–º –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
GROUP_URLS = {
    "–ò–ë-41": "https://www.altstu.ru/m/s/7000020491/",
    "–ò–ë-42": "https://www.altstu.ru/m/s/7000020492/",
    "–ò–ë-43": "https://www.altstu.ru/m/s/7000020493/"
}

# –ö–µ—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø–∞—Ä—Å–∏—Ç—å –Ω–∞ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
schedule_cache = {}
cache_timeout = 3600  # 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –°–ª–æ–≤–∞—Ä—å —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–∞ –º–æ–±–∏–ª–∫–µ –∫—Ä–∞—Å–∏–≤–æ –≤—Å–µ –±—ã–ª–æ. –ú–µ–Ω—è–π—Ç–µ –Ω–µ —Å–≤–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã
SUBJECT_ABBREVIATIONS = {
    "–î–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ —Ç–µ–æ—Ä–∏—è —á–∏—Å–µ–ª": "–î–∏—Å–∫—Ä–µ—Ç–∫–∞",
    "–ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏": "–ê–ø–ø–∞—Ä–∞—Ç–∫–∞",
    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ —Å–∏—Å—Ç–µ–º—ã": "–ò–ü–ò–°",
    "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫": "–ò–Ω. —è–∑",
    "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑": "–ú–∞—Ç–∞–Ω",
    "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞ –∏ —Å–ø–æ—Ä—Ç": "–§–∏–∑—Ä–∞",
    "–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏": "–ò—Å—Ç–æ—Ä–∏—è",
    "–î–æ–∫—É–º–µ–Ω—Ç–æ–≤–µ–¥–µ–Ω–∏–µ": "–î–æ–∫-–≤–µ–¥–µ–Ω–∏–µ"
}

def get_short_subject_name(name: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π"""
    return SUBJECT_ABBREVIATIONS.get(name, name)

class Subject:
    def __init__(self, time: str, name: str, type_: str, room: str, teacher: str, position: str, is_exam: bool = False, is_once: bool = False):
        self.time = time
        self.name = name
        self.type = type_
        self.room = room
        self.teacher = teacher
        self.position = position
        self.is_exam = is_exam
        self.is_once = is_once
    
    def __str__(self) -> str:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
        short_name = get_short_subject_name(self.name)
        
        type_str = f"{self.type}" if self.type else ""
        room_str = f"- {self.room}" if self.room else ""
        # –£–±–∏—Ä–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
        result = f"*{self.time}* - *{short_name}* {type_str} {room_str}"
        
        # –ó–∞–º–µ–Ω—è–µ–º "–ø–æ–¥–≥—Ä—É–ø–ø–∞ X" –Ω–∞ –ø—Ä–æ—Å—Ç–æ –±—É–∫–≤—É –ø–æ–¥–≥—Ä—É–ø–ø—ã
        result = result.replace("–ø–æ–¥–≥—Ä—É–ø–ø–∞ –ê", "–ê")
        result = result.replace("–ø–æ–¥–≥—Ä—É–ø–ø–∞ –ë", "–ë")
        result = result.replace("–ø–æ–¥–≥—Ä—É–ø–ø–∞ –í", "–í")
        result = result.replace("–ø–æ–¥–≥—Ä—É–ø–ø–∞ –ì", "–ì")
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        result = re.sub(r'\s+', ' ', result).strip()
        # –ó–∞–º–µ–Ω—è–µ–º –¥–≤–æ–π–Ω—ã–µ —Ç–∏—Ä–µ –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
        result = result.replace('- -', '-')
        
        if self.is_exam:
            result = f"üìù {result}" # –≠–∫–∑–∞–º–µ–Ω / –∑–∞—á–µ—Ç
        elif self.is_once:
            result = f"‚ö†Ô∏è {result}" # –†–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ
            
        return result

class Day:
    def __init__(self, date: str, weekday: str):
        self.date = date
        self.weekday = weekday
        self.subjects: List[Subject] = []
    
    def add_subject(self, subject: Subject) -> None:
        self.subjects.append(subject)
    
    def __str__(self) -> str:
        if not self.subjects:
            return f"*{self.date} {self.weekday}*\n–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç"
        
        result = f"*{self.date} {self.weekday}*\n"
        for subject in self.subjects:
            result += f"{subject}\n"
        return result

class Week:
    def __init__(self, number: int):
        self.number = number
        self.days: List[Day] = []
    
    def add_day(self, day: Day) -> None:
        self.days.append(day)
    
    def __str__(self) -> str:
        result = f"*–ù–µ–¥–µ–ª—è {self.number}*\n\n"
        for day in self.days:
            result += f"{day}\n"
        return result

class Schedule:
    def __init__(self, group: str):
        self.group = group
        self.weeks: List[Week] = []
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        self.created_at = time.time()
    
    def add_week(self, week: Week) -> None:
        self.weeks.append(week)
    
    def __str__(self) -> str:
        result = f"*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {self.group}*\n\n"
        for week in self.weeks:
            result += f"{week}\n"
        return result

def parse_schedule(group: str) -> Optional[Schedule]:
    """
    –ü–∞—Ä—Å–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–µ—Ä–≤–µ—Ä—É.
    """
    global schedule_cache
    
    if group not in GROUP_URLS:
        logger.error(f"–ì—Ä—É–ø–ø–∞ {group} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ URL")
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if group in schedule_cache:
        cached_schedule = schedule_cache[group]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        if hasattr(cached_schedule, 'created_at') and time.time() - cached_schedule.created_at < cache_timeout:
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}")
            return cached_schedule
    
    url = GROUP_URLS[group]
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–∞
    max_retries = 3
    retry_delay = 2  # —Å–µ–∫—É–Ω–¥—ã
    
    for attempt in range(max_retries):
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group}, –ø–æ–ø—ã—Ç–∫–∞ {attempt+1}")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ç–∞–π–º-–∞—É—Ç–∞
            session = requests.Session()
            response = session.get(
                url, 
                timeout=(10, 30),  # (connect timeout, read timeout)
                headers={
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                }
            )
            response.raise_for_status()
            
            # –°–æ—Ö—Ä–∞–Ω–∏–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            with open(f"debug_{group}.html", "w", encoding="utf-8") as f:
                f.write(response.text)
            
            soup = BeautifulSoup(response.text, 'lxml')
            
            schedule = Schedule(group)
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ–¥–µ–ª—å
            week_headers = soup.find_all('h4', string=re.compile(r'–ù–µ–¥–µ–ª—è\s+\d+'))
            
            if not week_headers:
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ–¥–µ–ª—å –¥–ª—è –≥—Ä—É–ø–ø—ã {group}")
                return None
                
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(week_headers)} –Ω–µ–¥–µ–ª—å")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –¥–Ω–µ–π –Ω–∞ —Ä–∞–∑–Ω—ã–µ –Ω–µ–¥–µ–ª–∏
            weeks_content = []
            for i in range(len(week_headers)):
                current_header = week_headers[i]
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≥–¥–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
                next_header = None
                if i < len(week_headers) - 1:
                    next_header = week_headers[i + 1]
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
                week_match = re.search(r'–ù–µ–¥–µ–ª—è\s+(\d+)', current_header.text)
                if not week_match:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –∏–∑ '{current_header.text}'")
                    continue
                
                week_number = int(week_match.group(1))
                
                # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –±–ª–æ–∫–∏ –¥–Ω–µ–π –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏
                day_blocks = []
                current_elem = current_header.next_sibling
                
                while current_elem:
                    # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–µ–¥–µ–ª–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                    if next_header and current_elem == next_header:
                        break
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ –±–ª–æ–∫ –¥–Ω—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                    if hasattr(current_elem, 'name') and current_elem.name == 'div' and 'block-index' in current_elem.get('class', []):
                        day_blocks.append(current_elem)
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
                    if hasattr(current_elem, 'next_sibling'):
                        current_elem = current_elem.next_sibling
                    else:
                        break
                
                weeks_content.append({
                    'week_number': week_number,
                    'day_blocks': day_blocks
                })
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –æ—Ç–¥–µ–ª—å–Ω–æ
            for week_data in weeks_content:
                week_number = week_data['week_number']
                day_blocks = week_data['day_blocks']
                
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–µ–ª–∏ {week_number}, –Ω–∞–π–¥–µ–Ω–æ {len(day_blocks)} –¥–Ω–µ–π")
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–µ–¥–µ–ª–∏
                week = Week(week_number)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
                for day_block in day_blocks:
                    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è
                    day_header = day_block.find('h2')
                    if not day_header:
                        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è –≤ –±–ª–æ–∫–µ")
                        continue
                    
                    day_info = day_header.text.strip().split()
                    if len(day_info) < 2:
                        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–Ω—è: '{day_header.text}'")
                        continue
                    
                    date = day_info[0]
                    weekday = day_info[1]
                    
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–Ω—è {date} {weekday}")
                    
                    day = Day(date, weekday)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
                    subjects_block = day_block.find('div', class_='list-group')
                    if not subjects_block:
                        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –±–ª–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –¥–Ω—è {date}")
                        week.add_day(day)
                        continue
                    
                    subject_items = subjects_block.find_all('div', class_='list-group-item')
                    
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(subject_items)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –¥–Ω—è {date}")
                    
                    for subject_item in subject_items:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ä–∞–∑–æ–≤—ã–º –∑–∞–Ω—è—Ç–∏–µ–º –∏–ª–∏ —ç–∫–∑–∞–º–µ–Ω–æ–º
                        is_once = 'once' in subject_item.get('class', [])
                        is_exam = 'once-exam' in subject_item.get('class', [])
                        
                        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
                        subject_text = re.sub(r'\s+', ' ', subject_item.get_text(strip=True).replace('\n', ' '))
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
                        time_val = ""
                        name = ""
                        type_ = ""
                        room = ""
                        teacher = ""
                        position = ""
                        
                        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è (–æ–±—ã—á–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XX:XX-XX:XX)
                        time_match = re.match(r'(\d{2}:\d{2}-\d{2}:\d{2})', subject_text)
                        if time_match:
                            time_val = time_match.group(1)
                            subject_text = subject_text[len(time_val):].strip()
                        
                        # –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
                        name_elem = subject_item.find('strong')
                        if name_elem:
                            name = name_elem.text.strip()
                            # –£–¥–∞–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è —Ç–µ–∫—Å—Ç–∞
                            subject_text = subject_text.replace(name, '', 1).strip()
                        
                        # –ü–∞—Ä—Å–∏–º —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è (–≤ —Å–∫–æ–±–∫–∞—Ö)
                        type_match = re.search(r'\(([^)]+)\)', subject_text)
                        if type_match:
                            type_ = type_match.group(0)  # –í–∫–ª—é—á–∞—è —Å–∫–æ–±–∫–∏
                            subject_text = subject_text.replace(type_, '', 1).strip()
                        
                        # –ü–∞—Ä—Å–∏–º –∞—É–¥–∏—Ç–æ—Ä–∏—é
                        room_match = re.search(r'\d+\s*[–ê-–Ø]+', subject_text)
                        if room_match:
                            room = room_match.group(0)
                            subject_text = subject_text.replace(room, '', 1).strip()
                        
                        # –ü–∞—Ä—Å–∏–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
                        teacher_match = re.search(r'[–ê-–Ø–∞-—è]+\s+[–ê-–Ø]\.\s*[–ê-–Ø]\.', subject_text)
                        if teacher_match:
                            teacher = teacher_match.group(0).strip()
                            subject_text = subject_text.replace(teacher, '', 1).strip()
                        
                        # –û—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç —Å—á–∏—Ç–∞–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å—é
                        position = subject_text.strip('-').strip()
                        
                        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Subject
                        subject = Subject(
                            time=time_val,
                            name=name,
                            type_=type_,
                            room=room,
                            teacher=teacher,
                            position=position,
                            is_exam=is_exam,
                            is_once=is_once
                        )
                        
                        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: {subject}")
                        day.add_subject(subject)
                    
                    week.add_day(day)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–µ–ª—é –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                schedule.add_week(week)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            schedule_cache[group] = schedule
            
            return schedule
        
        except requests.Timeout as e:
            logger.error(f"–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group}: {e}")
            if attempt < max_retries - 1:
                logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫...")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º time.sleep() –≤–º–µ—Å—Ç–æ sleep
                time.sleep(retry_delay)
                retry_delay *= 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
            else:
                logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à–µ
                if group in schedule_cache:
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}")
                    return schedule_cache[group]
                return None
                
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group}: {e}")
            if attempt < max_retries - 1:
                logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫...")
                time.sleep(retry_delay)
                retry_delay *= 2
            else:
                logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à–µ
                if group in schedule_cache:
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}")
                    return schedule_cache[group]
                return None
                
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group}: {e}")
            if attempt < max_retries - 1:
                logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫...")
                time.sleep(retry_delay)
                retry_delay *= 2
            else:
                logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à–µ
                if group in schedule_cache:
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}")
                    return schedule_cache[group]
                return None
    
    return None

def get_today_schedule(group: str) -> str:
    try:
        schedule = parse_schedule(group)
        if not schedule:
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}"
        
        today = datetime.now()
        today_date = today.strftime("%d.%m.%y")
        
        logger.info(f"–ü–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today_date}) –¥–ª—è –≥—Ä—É–ø–ø—ã {group}")
        
        for week in schedule.weeks:
            for day in week.days:
                day_date = day.date
                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω—è {day_date}")
                
                try:
                    # –ò–Ω–æ–≥–¥–∞ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–∏–º, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                    day_date_obj = None
                    
                    date_formats = ["%d.%m.%y", "%d.%m.%Y"]
                    for fmt in date_formats:
                        try:
                            day_date_obj = datetime.strptime(day_date, fmt)
                            break
                        except ValueError:
                            continue
                    
                    if not day_date_obj:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {day_date}")
                        continue
                    
                    logger.info(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞—Ç: {day_date_obj.date()} –∏ {today.date()}")
                    
                    if day_date_obj.date() == today.date():
                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group}")
                        
                        if not day.subjects:
                            return f"*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è*\n\n----- *{day.date} {day.weekday}* -----\n\n–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç"
                        
                        result = f"*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è*\n\n----- *{day.date} {day.weekday}* -----\n\n"
                        for subject in day.subjects:
                            result += f"{subject}\n"
                        
                        return result
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã {day_date}: {e}")
                    continue
        
        logger.warning(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group}: {e}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def get_tomorrow_schedule(group: str) -> str:
    try:
        schedule = parse_schedule(group)
        if not schedule:
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}"
        
        today = datetime.now()
        tomorrow = today + timedelta(days=1)
        tomorrow_date = tomorrow.strftime("%d.%m.%y")
        
        logger.info(f"–ü–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow_date}) –¥–ª—è –≥—Ä—É–ø–ø—ã {group}")
        
        for week in schedule.weeks:
            for day in week.days:
                day_date = day.date
                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω—è {day_date}")
                
                try:
                    # –ò–Ω–æ–≥–¥–∞ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–∏–º, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                    day_date_obj = None
                    
                    date_formats = ["%d.%m.%y", "%d.%m.%Y"]
                    for fmt in date_formats:
                        try:
                            day_date_obj = datetime.strptime(day_date, fmt)
                            break
                        except ValueError:
                            continue
                    
                    if not day_date_obj:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {day_date}")
                        continue
                    
                    logger.info(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞—Ç: {day_date_obj.date()} –∏ {tomorrow.date()}")
                    
                    if day_date_obj.date() == tomorrow.date():
                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}")
                        
                        if not day.subjects:
                            return f"*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group} –Ω–∞ –∑–∞–≤—Ç—Ä–∞*\n\n----- *{day.date} {day.weekday}* -----\n\n–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç"
                        
                        result = f"*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group} –Ω–∞ –∑–∞–≤—Ç—Ä–∞*\n\n----- *{day.date} {day.weekday}* -----\n\n"
                        for subject in day.subjects:
                            result += f"{subject}\n"
                        
                        return result
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã {day_date}: {e}")
                    continue
        
        logger.warning(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}: {e}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def get_week_schedule(group: str, week_number: int = None) -> str:
    try:
        schedule = parse_schedule(group)
        if not schedule:
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}"
        
        if week_number is None:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã - –Ω–µ–¥–µ–ª—è 1)
            week_number = 1
        
        logger.info(f"–ü–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é {week_number} –¥–ª—è –≥—Ä—É–ø–ø—ã {group}")
        
        for week in schedule.weeks:
            if week.number == week_number:
                logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –Ω–µ–¥–µ–ª—è {week_number}, –¥–Ω–µ–π: {len(week.days)}")
                
                if not week.days:
                    return f"*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group} –Ω–∞ –Ω–µ–¥–µ–ª—é {week_number}*\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–Ω—è—Ç–∏—è—Ö"
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –¥–∞—Ç–µ
                sorted_days = sorted(week.days, key=lambda d: datetime.strptime(d.date, "%d.%m.%y") if "." in d.date else datetime.now())
                
                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –¥–Ω–∏, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º
                days_to_show = sorted_days[:3]
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                result = f"*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group} –Ω–∞ –Ω–µ–¥–µ–ª—é {week_number}*\n\n"
                
                for day in days_to_show:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
                    result += f"----- *{day.date} {day.weekday}* -----\n"
                    if day.subjects:
                        for subject in day.subjects:
                            result += f"{subject}\n"
                    else:
                        result += "–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n"
                    result += "\n"
                    
                return result
        
        logger.warning(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é {week_number} –¥–ª—è –≥—Ä—É–ø–ø—ã {group} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é {week_number} –¥–ª—è –≥—Ä—É–ø–ø—ã {group} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é {week_number} –¥–ª—è –≥—Ä—É–ø–ø—ã {group}: {e}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." 

import os
import logging
import asyncio
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, ConversationHandler
from telegram.error import TelegramError, NetworkError, TimedOut
from telegram.request import HTTPXRequest
import parser
import db  
from datetime import datetime


load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —É–¥–∞–ª–∏—Ç–µ –µ—Å—Ç—å —Å–ø–∞–º –≤ –∫–æ–Ω—Å–æ–ª–∏ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


CHOOSING_GROUP, CHOOSING_SCHEDULE = range(2)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ), –µ—Å–ª–∏ –≤–ø–∞–¥–ª—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î, —Ö–æ—Ç—è –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ –æ–Ω–∞ —Ç—É—Ç –Ω–µ –Ω—É–∂–Ω–∞, –Ω–æ —ç—Ç —É–∂–µ –º–æ—è —à–∏–∑–∞
# user_groups = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –¢—É—Ç –≥—Ä—É–ø–ø—ã —Å–≤–æ–∏ —Å—Ç–∞–≤–∏–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª —Ç–æ–ª—å–∫–æ –Ω–∞ 3–µ—Ö, –∫–∞–∫ –±—É–¥–µ—Ç –ø—Ä–∏ 4 –∏ –±–æ–ª–µ–µ —è —Ö–∑)
    try:
        keyboard = [
            [
                InlineKeyboardButton("–ò–ë-41", callback_data="group_–ò–ë-41"),
                InlineKeyboardButton("–ò–ë-42", callback_data="group_–ò–ë-42"),
                InlineKeyboardButton("–ò–ë-43", callback_data="group_–ò–ë-43"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ê–ª—Ç–ì–¢–£!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:",
            reply_markup=reply_markup
        )
        
        return CHOOSING_GROUP
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ start: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

async def group_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã."""
    try:
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
        group = query.data.split("_")[1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_id = update.effective_user.id
        db.save_user_group(user_id, group)
        
        keyboard = [
            [
                InlineKeyboardButton("–ù–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="schedule_today"),
                InlineKeyboardButton("–ù–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="schedule_tomorrow"),
            ],
            [
                InlineKeyboardButton("–ù–µ–¥–µ–ª—è 1", callback_data="schedule_week_1"),
                InlineKeyboardButton("–ù–µ–¥–µ–ª—è 2", callback_data="schedule_week_2"),
            ],
            [
                InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="change_group"),
            ],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: *{group}*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return CHOOSING_SCHEDULE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ group_selected: {e}")
        try:
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except:
            pass
        return ConversationHandler.END

async def schedule_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –¢—É—Ç —Ç–æ–∂–µ –≥—Ä—É–ø–ø—ã –º–µ–Ω—è–µ–º
    try:
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        group = db.get_user_group(user_id)
        
        if not group:
            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
            keyboard = [
                [
                    InlineKeyboardButton("–ò–ë-41", callback_data="group_–ò–ë-41"),
                    InlineKeyboardButton("–ò–ë-42", callback_data="group_–ò–ë-42"),
                    InlineKeyboardButton("–ò–ë-43", callback_data="group_–ò–ë-43"),
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
                reply_markup=reply_markup
            )
            return CHOOSING_GROUP
        
        schedule_type = query.data.split("_")[1]
        
        if schedule_type == "today":
            # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            schedule_text = parser.get_today_schedule(group)
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard = [
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
        elif schedule_type == "tomorrow":
            
            schedule_text = parser.get_tomorrow_schedule(group)
           
            keyboard = [
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
        elif schedule_type.startswith("week"):
            
            week_number = int(query.data.split("_")[2])
            schedule_text = parser.get_week_schedule(group, week_number)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            schedule = parser.parse_schedule(group)
            
            if schedule:
                for week in schedule.weeks:
                    if week.number == week_number and week.days:
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –¥–∞—Ç–µ
                        sorted_days = sorted(week.days, key=lambda d: 
                            datetime.strptime(d.date, "%d.%m.%y") if "." in d.date else datetime.now())
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
                        keyboard_days = []
                        row = []
                        
                        for day in sorted_days:
                            day_button = InlineKeyboardButton(
                                f"{day.date} ({day.weekday})", 
                                callback_data=f"day_{week_number}_{day.date}"
                            )
                            row.append(day_button)
                            
                            # –ú–∞–∫—Å–∏–º—É–º 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
                            if len(row) == 2:
                                keyboard_days.append(row)
                                row = []
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
                        if row:
                            keyboard_days.append(row)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                        keyboard_days.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
                        reply_markup = InlineKeyboardMarkup(keyboard_days)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await query.edit_message_text(
                            schedule_text,
                            reply_markup=reply_markup,
                            parse_mode="Markdown"
                        )
                        return CHOOSING_SCHEDULE
            
           
            keyboard = [
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
        else:
            schedule_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard = [
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            schedule_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return CHOOSING_SCHEDULE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ schedule_selected: {e}")
        try:
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            keyboard = [
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_reply_markup(reply_markup=reply_markup)
        except:
            pass
        return CHOOSING_SCHEDULE

async def show_day_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å."""
    try:
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        group = db.get_user_group(user_id)
        
        if not group:
            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å. –¢—É—Ç –º–µ–Ω—è–µ–º –Ω–∞ —Å–≤–æ–∏ –≥—Ä—É–ø–ø—ã
            keyboard = [
                [
                    InlineKeyboardButton("–ò–ë-41", callback_data="group_–ò–ë-41"),
                    InlineKeyboardButton("–ò–ë-42", callback_data="group_–ò–ë-42"),
                    InlineKeyboardButton("–ò–ë-43", callback_data="group_–ò–ë-43"),
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
                reply_markup=reply_markup
            )
            return CHOOSING_GROUP
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        data_parts = query.data.split("_")
        week_number = int(data_parts[1])
        date = data_parts[2]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule = parser.parse_schedule(group)
        if not schedule:
            await query.edit_message_text(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
            )
            return CHOOSING_SCHEDULE
        
        # –ò—â–µ–º –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å
        day_schedule = None
        day_obj = None
        week_obj = None
        
        for week in schedule.weeks:
            if week.number == week_number:
                week_obj = week
                for day in week.days:
                    if day.date == date:
                        day_obj = day
                        break
                break
        
        if not day_obj:
            await query.edit_message_text(
                f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date} –¥–ª—è –≥—Ä—É–ø–ø—ã {group} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"schedule_week_{week_number}")]])
            )
            return CHOOSING_SCHEDULE
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
        result = f"*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group} –Ω–∞ {day_obj.date} ({day_obj.weekday})*\n\n"
        
        if day_obj.subjects:
            for subject in day_obj.subjects:
                result += f"{subject}\n"
        else:
            result += "–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∏ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é
        if week_obj:
            day_index = week_obj.days.index(day_obj)
            row = []
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
            if day_index > 0:
                prev_day = week_obj.days[day_index - 1]
                row.append(InlineKeyboardButton(
                    f"¬´ {prev_day.date}",
                    callback_data=f"day_{week_number}_{prev_day.date}"
                ))
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
            if day_index < len(week_obj.days) - 1:
                next_day = week_obj.days[day_index + 1]
                row.append(InlineKeyboardButton(
                    f"{next_day.date} ¬ª",
                    callback_data=f"day_{week_number}_{next_day.date}"
                ))
            
            if row:
                keyboard.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–µ–¥–µ–ª—å–Ω–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        keyboard.append([InlineKeyboardButton("–ö –Ω–µ–¥–µ–ª–µ", callback_data=f"schedule_week_{week_number}")])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            result,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return CHOOSING_SCHEDULE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ show_day_schedule: {e}")
        try:
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            keyboard = [
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_reply_markup(reply_markup=reply_markup)
        except:
            pass
        return CHOOSING_SCHEDULE

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    try:
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        group = db.get_user_group(user_id)
        
        keyboard = [
            [
                InlineKeyboardButton("–ù–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="schedule_today"),
                InlineKeyboardButton("–ù–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="schedule_tomorrow"),
            ],
            [
                InlineKeyboardButton("–ù–µ–¥–µ–ª—è 1", callback_data="schedule_week_1"),
                InlineKeyboardButton("–ù–µ–¥–µ–ª—è 2", callback_data="schedule_week_2"),
            ],
            [
                InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="change_group"),
            ],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: *{group}*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return CHOOSING_SCHEDULE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ back_to_menu: {e}")
        return CHOOSING_SCHEDULE

async def change_group(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã."""
    try:
        query = update.callback_query
        await query.answer()
        
        keyboard = [
            [
                InlineKeyboardButton("–ò–ë-41", callback_data="group_–ò–ë-41"),
                InlineKeyboardButton("–ò–ë-42", callback_data="group_–ò–ë-42"),
                InlineKeyboardButton("–ò–ë-43", callback_data="group_–ò–ë-43"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:",
            reply_markup=reply_markup
        )
        
        return CHOOSING_GROUP
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ change_group: {e}")
        return CHOOSING_GROUP

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    try:
        keyboard = [
            [
                InlineKeyboardButton("–ò–ë-41", callback_data="group_–ò–ë-41"),
                InlineKeyboardButton("–ò–ë-42", callback_data="group_–ò–ë-42"),
                InlineKeyboardButton("–ò–ë-43", callback_data="group_–ò–ë-43"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        help_text = (
            "üîç *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ê–ª—Ç–ì–¢–£*\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –≥—Ä—É–ø–ø –ò–ë-41, –ò–ë-42, –ò–ë-43.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:"
        )
        await update.message.reply_text(help_text, parse_mode="Markdown", reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ help_command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")

async def today_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /today."""
    try:
        user_id = update.effective_user.id
        group = db.get_user_group(user_id)
        
        if not group:
            keyboard = [
                [
                    InlineKeyboardButton("–ò–ë-41", callback_data="group_–ò–ë-41"),
                    InlineKeyboardButton("–ò–ë-42", callback_data="group_–ò–ë-42"),
                    InlineKeyboardButton("–ò–ë-43", callback_data="group_–ò–ë-43"),
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É:",
                reply_markup=reply_markup
            )
            return
        
        schedule_text = parser.get_today_schedule(group)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = [
            [
                InlineKeyboardButton("–ù–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="schedule_tomorrow"),
                InlineKeyboardButton("–ù–µ–¥–µ–ª—è 1", callback_data="schedule_week_1"),
            ],
            [
                InlineKeyboardButton("–ù–µ–¥–µ–ª—è 2", callback_data="schedule_week_2"),
                InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="change_group"),
            ],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(schedule_text, parse_mode="Markdown", reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ today_command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")

async def tomorrow_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tomorrow."""
    try:
        user_id = update.effective_user.id
        group = db.get_user_group(user_id)
        
        if not group:
            keyboard = [
                [
                    InlineKeyboardButton("–ò–ë-41", callback_data="group_–ò–ë-41"),
                    InlineKeyboardButton("–ò–ë-42", callback_data="group_–ò–ë-42"),
                    InlineKeyboardButton("–ò–ë-43", callback_data="group_–ò–ë-43"),
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É:",
                reply_markup=reply_markup
            )
            return
        
        schedule_text = parser.get_tomorrow_schedule(group)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = [
            [
                InlineKeyboardButton("–ù–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="schedule_today"),
                InlineKeyboardButton("–ù–µ–¥–µ–ª—è 1", callback_data="schedule_week_1"),
            ],
            [
                InlineKeyboardButton("–ù–µ–¥–µ–ª—è 2", callback_data="schedule_week_2"),
                InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="change_group"),
            ],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(schedule_text, parse_mode="Markdown", reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ tomorrow_command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")

async def week1_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /week1."""
    try:
        user_id = update.effective_user.id
        group = db.get_user_group(user_id)
        
        if not group:
            keyboard = [
                [
                    InlineKeyboardButton("–ò–ë-41", callback_data="group_–ò–ë-41"),
                    InlineKeyboardButton("–ò–ë-42", callback_data="group_–ò–ë-42"),
                    InlineKeyboardButton("–ò–ë-43", callback_data="group_–ò–ë-43"),
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É:",
                reply_markup=reply_markup
            )
            return
        
        schedule_text = parser.get_week_schedule(group, 1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = [
            [
                InlineKeyboardButton("–ù–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="schedule_today"),
                InlineKeyboardButton("–ù–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="schedule_tomorrow"),
            ],
            [
                InlineKeyboardButton("–ù–µ–¥–µ–ª—è 2", callback_data="schedule_week_2"),
                InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="change_group"),
            ],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(schedule_text, parse_mode="Markdown", reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ week1_command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")

async def week2_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /week2."""
    try:
        user_id = update.effective_user.id
        group = db.get_user_group(user_id)
        
        if not group:
            keyboard = [
                [
                    InlineKeyboardButton("–ò–ë-41", callback_data="group_–ò–ë-41"),
                    InlineKeyboardButton("–ò–ë-42", callback_data="group_–ò–ë-42"),
                    InlineKeyboardButton("–ò–ë-43", callback_data="group_–ò–ë-43"),
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É:",
                reply_markup=reply_markup
            )
            return
        
        schedule_text = parser.get_week_schedule(group, 2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = [
            [
                InlineKeyboardButton("–ù–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="schedule_today"),
                InlineKeyboardButton("–ù–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="schedule_tomorrow"),
            ],
            [
                InlineKeyboardButton("–ù–µ–¥–µ–ª—è 1", callback_data="schedule_week_1"),
                InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="change_group"),
            ],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(schedule_text, parse_mode="Markdown", reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ week2_command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Ç–µ–ª–µ–≥—Ä–∞–º–∞."""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    
    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏–ª–∏ —Å–µ—Ç—å—é
    if isinstance(context.error, (NetworkError, TimedOut)):
        logger.error("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(5)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ ConversationHandler."""
    try:
        query = update.callback_query
        await query.answer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø callback_data
        data = query.data
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –æ—Ç –∫–Ω–æ–ø–∫–∏: {data}")
        
        if data.startswith("group_"):
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
            group = data.split("_")[1]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            user_id = update.effective_user.id
            db.save_user_group(user_id, group)
            
            keyboard = [
                [
                    InlineKeyboardButton("–ù–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="schedule_today"),
                    InlineKeyboardButton("–ù–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="schedule_tomorrow"),
                ],
                [
                    InlineKeyboardButton("–ù–µ–¥–µ–ª—è 1", callback_data="schedule_week_1"),
                    InlineKeyboardButton("–ù–µ–¥–µ–ª—è 2", callback_data="schedule_week_2"),
                ],
                [
                    InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="change_group"),
                ],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: *{group}*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            
        elif data.startswith("schedule_"):
            # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ schedule_selected
            await schedule_selected(update, context)
            
        elif data.startswith("day_"):
            # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ show_day_schedule
            await show_day_schedule(update, context)
            
        elif data == "back_to_menu":
            user_id = update.effective_user.id
            group = db.get_user_group(user_id)
            
            if not group:
                # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
                keyboard = [
                    [
                        InlineKeyboardButton("–ò–ë-41", callback_data="group_–ò–ë-41"),
                        InlineKeyboardButton("–ò–ë-42", callback_data="group_–ò–ë-42"),
                        InlineKeyboardButton("–ò–ë-43", callback_data="group_–ò–ë-43"),
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
                    reply_markup=reply_markup
                )
                return
            
            keyboard = [
                [
                    InlineKeyboardButton("–ù–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="schedule_today"),
                    InlineKeyboardButton("–ù–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="schedule_tomorrow"),
                ],
                [
                    InlineKeyboardButton("–ù–µ–¥–µ–ª—è 1", callback_data="schedule_week_1"),
                    InlineKeyboardButton("–ù–µ–¥–µ–ª—è 2", callback_data="schedule_week_2"),
                ],
                [
                    InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="change_group"),
                ],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: *{group}*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            
        elif data == "change_group":
            keyboard = [
                [
                    InlineKeyboardButton("–ò–ë-41", callback_data="group_–ò–ë-41"),
                    InlineKeyboardButton("–ò–ë-42", callback_data="group_–ò–ë-42"),
                    InlineKeyboardButton("–ò–ë-43", callback_data="group_–ò–ë-43"),
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:",
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ button_handler: {e}")
        try:
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except:
            pass

async def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    db.init_db()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv("BOT_TOKEN")
    if not token:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º-–∞—É—Ç–∞–º–∏
    request = HTTPXRequest(
        connection_pool_size=8,
        connect_timeout=10.0,  # 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        read_timeout=30.0,     # 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ —á—Ç–µ–Ω–∏–µ
        write_timeout=30.0,    # 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–ø–∏—Å—å
    )
    

    application = Application.builder().token(token).request(request).build()
    
   
    application.add_error_handler(error_handler)
    
    
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –°–æ–∑–¥–∞–µ–º conversation handler, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–æ—Ç–∞
    # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_GROUP: [
                # –ü—É—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Ç–µ–ø–µ—Ä—å –≤—Å—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ button_handler
            ],
            CHOOSING_SCHEDULE: [
                # –ü—É—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Ç–µ–ø–µ—Ä—å –≤—Å—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ button_handler
            ],
        },
        fallbacks=[CommandHandler("start", start)],
        per_message=True,
        per_chat=False,
        name="schedule_conversation",
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("today", today_command))
    application.add_handler(CommandHandler("tomorrow", tomorrow_command))
    application.add_handler(CommandHandler("week1", week1_command))
    application.add_handler(CommandHandler("week2", week2_command))
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await application.initialize()
    await application.start()
    await application.updater.start_polling(poll_interval=0.5, timeout=30, drop_pending_updates=True)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    
    # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º –¥–æ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    try:
        await asyncio.Event().wait()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
    except (KeyboardInterrupt, SystemExit):
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        await application.stop()
        await application.shutdown()

if __name__ == "__main__":
    asyncio.run(main()) 
